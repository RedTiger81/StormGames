<?php
declare(strict_types=1);
namespace jasonwynn10\VanillaEntityAI\entity\passiveaggressive;

use jasonwynn10\VanillaEntityAI\entity\Collidable;
use jasonwynn10\VanillaEntityAI\entity\CreatureBase;
use jasonwynn10\VanillaEntityAI\entity\Interactable;
use pocketmine\block\Lava;
use pocketmine\block\Water;
use pocketmine\entity\Entity;
use pocketmine\item\ItemFactory;
use pocketmine\item\ItemIds;
use pocketmine\item\Shears;
use pocketmine\nbt\tag\CompoundTag;
use pocketmine\network\mcpe\protocol\types\entity\EntityLegacyIds;
use pocketmine\network\mcpe\protocol\types\entity\EntityMetadataFlags;
use pocketmine\network\mcpe\protocol\types\entity\EntityMetadataProperties;

class SnowGolem extends CreatureBase implements Collidable, Interactable {
	public const NETWORK_ID = EntityLegacyIds::SNOW_GOLEM;
	public $width = 1.281;
	public $height = 1.875;
	public $sheared = false;

	public function initEntity(CompoundTag $nbt) : void {
		$this->setPumpkin($nbt->getByte("Pumpkin", 1) === 1);
		$this->setTarget(null);
		parent::initEntity($nbt); // TODO: Change the autogenerated stub
	}

	/**
	 * @param int $tickDiff
	 *
	 * @return bool
	 */
	public function entityBaseTick(int $tickDiff = 1) : bool {
		$biome = $this->location->world->getBiome($this->location->getFloorX(), $this->location->getFloorZ());
		if($biome->getTemperature() > 1)
			$this->setOnFire(200);

		if($this->location->world->getBlockLightAt($this->location->getFloorX(), $this->location->getFloorY(), $this->location->getFloorZ()) >= 14 or
		   $this->location->world->getBlock($this->location, true, false) instanceof Water or
		   $this->location->world->getBlock($this->location, true, false) instanceof Lava) { // TODO: check weather
			$this->setOnFire(200);
		}
		// TODO: only make snow in biomes with less than 0.8 temp
		return parent::entityBaseTick($tickDiff); // TODO: Change the autogenerated stub
	}

	/**
	 * @return array
	 */
	public function getDrops() : array {
		return [ItemFactory::get(ItemIds::SNOWBALL, 0, mt_rand(0, 15))];
	}

	/**
	 * @return string
	 */
	public function getName() : string {
		return "Snow Golem";
	}

	/**
	 * @param Entity $entity
	 */
	public function onCollideWithEntity(Entity $entity) : void {
		// TODO: Implement onCollideWithEntity() method.
	}

	/**
	 * @param \pocketmine\player\Player $player
	 */
	public function onPlayerLook(\pocketmine\player\Player $player) : void {
		if($player->getInventory()->getItemInHand() instanceof Shears) {
			$this->getNetworkProperties()->setString(EntityMetadataProperties::INTERACTIVE_TAG, "Shear"); // Don't show button anymore
		}
	}

	/**
	 * @param \pocketmine\player\Player $player
	 */
	public function onPlayerInteract(\pocketmine\player\Player $player) : void {
		if($player->getInventory()->getItemInHand() instanceof Shears) {
			$this->setPumpkin(false);
		}
	}

	/**
	 * @param bool $wearing
	 *
	 * @return SnowGolem
	 */
	public function setPumpkin(bool $wearing = true) : self {
		$this->getNetworkProperties()->setGenericFlag(EntityMetadataFlags::SHEARED, !$wearing);
		$this->sheared = $wearing;
		return $this;
	}

	/**
	 * @return bool
	 */
	public function hasPumpkin() : bool {
		return $this->sheared;
	}

	public function saveNBT() : CompoundTag{
		$nbt = parent::saveNBT();
		$nbt->setByte("Pumpkin", (int) $this->sheared);
		return $nbt;
	}
}