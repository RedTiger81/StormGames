<?php
declare(strict_types=1);
namespace jasonwynn10\VanillaEntityAI\entity\neutral;

use jasonwynn10\VanillaEntityAI\entity\Collidable;
use jasonwynn10\VanillaEntityAI\entity\CollisionCheckingTrait;
use jasonwynn10\VanillaEntityAI\entity\Interactable;
use jasonwynn10\VanillaEntityAI\entity\Linkable;
use jasonwynn10\VanillaEntityAI\entity\LinkableTrait;
use jasonwynn10\VanillaEntityAI\entity\Lookable;

use pocketmine\block\Block;
use pocketmine\entity\Entity;
use pocketmine\math\AxisAlignedBB;
use pocketmine\nbt\tag\CompoundTag;
use pocketmine\network\mcpe\protocol\types\entity\EntityMetadataProperties;
use pocketmine\player\Player;

class Boat extends Entity implements Interactable, Linkable, Lookable, Collidable {
	use LinkableTrait, CollisionCheckingTrait;
	public function initEntity(CompoundTag $nbt) : void {
		parent::initEntity($nbt); // TODO: Change the autogenerated stub
	}

	/**
	 * @param int $tickDiff
	 *
	 * @return bool
	 */
	public function entityBaseTick(int $tickDiff = 1) : bool {
		return parent::entityBaseTick($tickDiff); // TODO: Change the autogenerated stub
	}

	/**
	 * @return string
	 */
	public function getName() : string {
		return "Boat";
	}

	public function onPlayerInteract(Player $player) : void {
		// TODO: Implement onPlayerInteract() method.
	}

	/**
	 * @param Player $player
	 */
	public function onPlayerLook(Player $player) : void {
		$this->getNetworkProperties()->setString(EntityMetadataProperties::INTERACTIVE_TAG, "Ride");
	}

	/**
	 * @param Entity $entity
	 */
	public function onCollideWithEntity(Entity $entity) : void {
		if(!$entity instanceof Player and $entity instanceof Linkable) {
			$this->setLink($entity);
		}
		// TODO: Implement onCollideWithEntity() method.
	}

	/**
	 * @param Block $block
	 */
	public function onCollideWithBlock(Block $block) : void {
		// TODO: break boat if with speed
		// TODO: Implement onCollideWithBlock() method.
	}

	/**
	 * @param AxisAlignedBB $source
	 */
	public function push(AxisAlignedBB $source) : void {
		$base = 0.15;
		$x = ($source->minX + $source->maxX) / 2;
		$z = ($source->minZ + $source->maxZ) / 2;
		$f = sqrt($x * $x + $z * $z);
		if($f <= 0) {
			return;
		}
		$f = 1 / $f;
		$motion = clone $this->motion;
		$motion->x /= 2;
		$motion->z /= 2;
		$motion->x += $x * $f * $base;
		$motion->z += $z * $f * $base;
		$this->setMotion($motion);
	}
}