<?php
declare(strict_types=1);
namespace jasonwynn10\VanillaEntityAI\entity\passive;

use jasonwynn10\VanillaEntityAI\data\ColorToMeta;
use jasonwynn10\VanillaEntityAI\entity\AnimalBase;
use jasonwynn10\VanillaEntityAI\entity\Collidable;
use jasonwynn10\VanillaEntityAI\entity\Interactable;

use pocketmine\entity\Entity;
use pocketmine\item\Dye;
use pocketmine\item\Item;
use pocketmine\item\ItemFactory;
use pocketmine\item\ItemIds;
use pocketmine\item\Shears;
use pocketmine\nbt\tag\CompoundTag;
use pocketmine\network\mcpe\protocol\LevelSoundEventPacket;
use pocketmine\network\mcpe\protocol\types\entity\EntityLegacyIds;
use pocketmine\network\mcpe\protocol\types\entity\EntityMetadataFlags;
use pocketmine\network\mcpe\protocol\types\entity\EntityMetadataProperties;
use pocketmine\network\mcpe\protocol\types\entity\EntityMetadataTypes;
use pocketmine\player\Player;

class Sheep extends AnimalBase implements Collidable, Interactable {
	public const NETWORK_ID = EntityLegacyIds::SHEEP;
	public $width = 1.2;
	public $height = 0.6;
	private $colorMeta = ColorToMeta::WHITE;
	private $sheared = false;

	public function initEntity(CompoundTag $nbt) : void {
		$this->setMaxHealth(8);
		parent::initEntity($nbt);

		$this->setSheared((bool)$nbt->getByte("Sheared", 0));

		$chance = mt_rand(1, 1000);
		if($chance <= 50) {
			$colorMeta = ColorToMeta::LIGHT_GRAY;
		}elseif($chance >= 51 and $chance <= 100) {
			$colorMeta = ColorToMeta::GRAY;
		}elseif($chance >= 101 and $chance <= 150) {
			$colorMeta = ColorToMeta::BLACK;
		}elseif($chance >= 151 and $chance <= 180) {
			$colorMeta = ColorToMeta::BROWN;
		}elseif($chance >= 181 and $chance <= 183) {
			$colorMeta = ColorToMeta::PINK;
		}else {
			$colorMeta = ColorToMeta::WHITE;
		}
		if($nbt->getByte("Color", ColorToMeta::WHITE) !== null)
			$colorMeta = $nbt->getByte("Color", ColorToMeta::WHITE);
		$this->setColor($colorMeta);
		if(mt_rand(1, 100) <= 5) {
			$this->setBaby(true);
		}
	}

	/**
	 * @param int $tickDiff
	 *
	 * @return bool
	 */
	public function entityBaseTick(int $tickDiff = 1) : bool {
		// TODO: eat grass to recover wool
		// TODO: Sheep follow players holding wheat within 8 blocks
		return parent::entityBaseTick($tickDiff); // TODO: Change the autogenerated stub
	}

	/**
	 * @return array
	 */
	public function getDrops() : array {
		$drops = parent::getDrops();
		if(!$this->isBaby()) {
			if($this->isOnFire()) {
				$drops[] = ItemFactory::get(ItemIds::COOKED_MUTTON, 0, mt_rand(1, 3));
			}else {
				$drops[] = ItemFactory::get(ItemIds::MUTTON, 0, mt_rand(1, 3));
			}
			if($this->isSheared()) {
				return $drops;
			}
			$drops[] = ItemFactory::get(ItemIds::WOOL, $this->colorMeta);
			return $drops;
		}else {
			return $drops;
		}
	}

	public function getXpDropAmount() : int {
		if(!$this->isBaby()) {
			return mt_rand(1, 3);
		}
		return parent::getXpDropAmount();
	}

	/**
	 * @return string
	 */
	public function getName() : string {
		return "Sheep";
	}

	/**
	 * @param Entity $entity
	 */
	public function onCollideWithEntity(Entity $entity) : void {
		// TODO: Implement onCollideWithEntity() method.
	}

	public function onPlayerLook(Player $player) : void {
		$hand = $player->getInventory()->getItemInHand();
		if(!$this->isBaby() and $hand instanceof Shears and !$this->sheared) {
			$this->getNetworkProperties()->setString(EntityMetadataProperties::INTERACTIVE_TAG, "Kes");
		}
		if($hand instanceof Dye and !$this->sheared) {
			$this->getNetworkProperties()->setString(EntityMetadataProperties::INTERACTIVE_TAG, "Boya");
		}
	}

	public function onPlayerInteract(Player $player) : void {
		$hand = $player->getInventory()->getItemInHand();
		if(!$this->isBaby() and $hand instanceof Shears and !$this->sheared) {
			$this->shear();
			$hand->applyDamage(1);
			$player->getInventory()->setItemInHand($hand);
			$this->getWorld()->broadcastLevelEvent($player->getPosition(), LevelSoundEventPacket::SOUND_SHEAR, 0);
		}
		if($hand instanceof Dye and !$this->sheared) {
			$this->setColor($hand->getColor()->getMagicNumber());
			$player->getInventory()->setItemInHand($hand->pop());
		}
	}

	/**
	 * @return Sheep
	 */
	public function shear() : self {
		$this->getWorld()->dropItem($this->location, ItemFactory::get(ItemIds::WOOL, $this->colorMeta, mt_rand(1, 3)));
		$this->setSheared(true);
		return $this;
	}

	/**
	 * @param bool $sheared
	 *
	 * @return Sheep
	 */
	public function setSheared(bool $sheared = true) : self {
		$this->sheared = $sheared;
		$this->getNetworkProperties()->setGenericFlag(EntityMetadataFlags::SHEARED, $sheared);
		return $this;
	}

	/**
	 * @return bool
	 */
	public function isSheared() : bool {
		return $this->sheared;
	}

	/**
	 * @param int $colorMeta
	 *
	 * @return Sheep
	 */
	public function setColor(int $colorMeta) : self {
		if($colorMeta >= 0 and $colorMeta <= 15) {
			$this->colorMeta = $colorMeta;
			$this->getNetworkProperties()->setByte(EntityMetadataProperties::COLOUR, $colorMeta);
		}else {
			throw new \OutOfRangeException("Meta value provided is out of range 0 - 15");
		}
		return $this;
	}

	/**
	 * @return int
	 */
	public function getColor() : int {
		return $this->colorMeta;
	}

	public function saveNBT() : CompoundTag{
		$nbt = parent::saveNBT();
		$nbt->setByte("Sheared", (int)$this->sheared);
		$nbt->setByte("Color", $this->colorMeta);
		return $nbt;
	}
}